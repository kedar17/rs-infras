name: Deploy changed files via FTP

on:
  push:
    branches:
      - admin

permissions:
  contents: read

jobs:
  deploy-changed-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure repo files are readable
        run: |
          # make files readable and directories traversable for the runner user
          sudo chown -R "$(id -u):$(id -g)" "$GITHUB_WORKSPACE" || true
          sudo chmod -R u+rwX "$GITHUB_WORKSPACE" || true
          # show problematic files (if any)
          find "$GITHUB_WORKSPACE" ! -readable -print || true

      - name: Install lftp
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: Compute changed files
        id: changes
        run: |
          # changed files (A M R) and deleted files (D)
          MODIFIED=$(git diff --name-only --diff-filter=AMR ${{ github.event.before }} ${{ github.sha }} || true)
          DELETED=$(git diff --name-only --diff-filter=D ${{ github.event.before }} ${{ github.sha }} || true)
          echo "modified<<EOF" >> $GITHUB_OUTPUT
          echo "$MODIFIED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "deleted<<EOF" >> $GITHUB_OUTPUT
          echo "$DELETED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload only modified/added files via FTP
        if: steps.changes.outputs.modified != ''
        env:
          FTP_HOST: ${{ secrets.CPANEL_HOST }}
          FTP_USER: ${{ secrets.CPANEL_FTP_USER }}
          FTP_PASS: ${{ secrets.CPANEL_FTP_PASS }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          set -euo pipefail

          EXCLUDE_REGEX='^(\.git|\.github|node_modules/|vendor/|\.env|tests/)'
          cd "$GITHUB_WORKSPACE"

          BATCH=$(mktemp)
          echo "set ftp:passive-mode on" >> "$BATCH"

          MODIFIED_CONTENT=${{ steps.changes.outputs.modified }}
          IFS=$'\n' read -r -d '' -a MODIFIED_FILES <<< "$MODIFIED_CONTENT"$'\0'

          UPLOAD_COUNT=0
          for f in "${MODIFIED_FILES[@]}"; do
            if [ -z "$f" ]; then
              continue
            fi
            # Normalize path and skip excluded patterns
            if [[ "$f" =~ $EXCLUDE_REGEX ]]; then
              echo "Skipping excluded: $f"
              continue
            fi
            if [ -d "$f" ]; then
              echo "Skipping directory: $f"
              continue
            fi
            # skip unreadable files (prevents permission denied)
            if [ ! -r "$f" ]; then
              echo "Skipping unreadable file: $f"
              continue
            fi

            remote_dir="${REMOTE_DIR%/}/$(dirname "$f")"
            echo "mkdir -p $remote_dir" >> "$BATCH"
            echo "put -O $remote_dir $f" >> "$BATCH"
            UPLOAD_COUNT=$((UPLOAD_COUNT+1))
            echo "Queued upload: $f -> $remote_dir"
          done

          if [ "$UPLOAD_COUNT" -eq 0 ]; then
            echo "No modified files to upload after filtering."
            rm -f "$BATCH"
            exit 0
          fi

          lftp -u "$FTP_USER","$FTP_PASS" ftp://"$FTP_HOST" -f "$BATCH"
          rm -f "$BATCH"
          echo "Uploaded $UPLOAD_COUNT files."

      - name: Remove deleted files on remote (if any)
        if: steps.changes.outputs.deleted != ''
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASS: ${{ secrets.FTP_PASS }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          set -euo pipefail

          echo "Processing deleted files..."
          DELETED_CONTENT=${{ steps.changes.outputs.deleted }}
          IFS=$'\n' read -r -d '' -a DELETED_FILES <<< "$DELETED_CONTENT"$'\0'

          BATCH_DEL=$(mktemp)
          echo "set ftp:passive-mode on" >> "$BATCH_DEL"

          DEL_COUNT=0
          for f in "${DELETED_FILES[@]}"; do
            if [ -z "$f" ]; then
              continue
            fi
            if [[ "$f" =~ ^(\.git|\.github|node_modules/|vendor/|\.env|tests/) ]]; then
              echo "Skipping excluded deletion: $f"
              continue
            fi
            remote_path="${REMOTE_DIR%/}/$f"
            echo "rm -f $remote_path" >> "$BATCH_DEL"
            parent_dir="$(dirname "$remote_path")"
            echo "rmdir $parent_dir || true" >> "$BATCH_DEL"
            DEL_COUNT=$((DEL_COUNT+1))
            echo "Queued delete: $remote_path"
          done

          if [ "$DEL_COUNT" -eq 0 ]; then
            echo "No deleted files to remove on remote after filtering."
            rm -f "$BATCH_DEL"
            exit 0
          fi

          lftp -u "$FTP_USER","$FTP_PASS" ftp://"$FTP_HOST" -f "$BATCH_DEL"
          rm -f "$BATCH_DEL"
          echo "Removed $DEL_COUNT files on remote (where present)."