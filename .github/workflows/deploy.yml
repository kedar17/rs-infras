- name: Checkout full history
  uses: actions/checkout@v4
  with:
    fetch-depth: 0

- name: Install lftp
  run: sudo apt-get update && sudo apt-get install -y lftp

- name: Compute changed files
  id: changes
  run: |
    echo "CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | tr '\n' ' ')" >> $GITHUB_OUTPUT

- name: Upload only changed files via FTP
  if: steps.changes.outputs.CHANGED != ''
  env:
    FTP_HOST: ${{ secrets.FTP_HOST }}
    FTP_USER: ${{ secrets.FTP_USER }}
    FTP_PASS: ${{ secrets.FTP_PASS }}
    REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
  run: |
    set -euo pipefail

    EXCLUDE_PATTERNS="^(\.git|\.github|node_modules/|vendor/|\.env|tests/)"
    cd $GITHUB_WORKSPACE

    # convert space-separated list to array
    read -r -a files <<< "${{ steps.changes.outputs.CHANGED }}"

    # build lftp batch commands
    BATCHFILE=$(mktemp)
    echo "set ftp:passive-mode on" >> "$BATCHFILE"

    for f in "${files[@]}"; do
      # skip directories and excluded patterns
      if [[ -z "$f" ]]; then continue; fi
      if [[ -d "$f" ]]; then continue; fi
      if [[ "$f" =~ $EXCLUDE_PATTERNS ]]; then
        echo "Skipping $f"
        continue
      fi

      remote_path="${REMOTE_DIR%/}/$(dirname "$f")"
      remote_file="${REMOTE_DIR%/}/$f"

      echo "mkdir -p $remote_path" >> "$BATCHFILE"
      # use -O to upload to destination directory; ensure parent dir exists
      echo "put -O $remote_path $f" >> "$BATCHFILE"
    done

    # if nothing to upload, exit
    if [[ ! -s "$BATCHFILE" ]]; then
      echo "No files to upload after filtering."
      exit 0
    fi

    # run lftp with batchfile
    lftp -u "$FTP_USER","$FTP_PASS" ftp://$FTP_HOST -f "$BATCHFILE"